# Nom du workflow qui apparaîtra dans l'interface GitHub Actions
name: DevSecOps Security Pipeline

# Déclenche le workflow sur les push et les pull requests sur la branche main
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Définition des jobs (étapes) du pipeline
jobs:
  # Job pour les tests et la construction de l'application
  build-and-test:
    name: Build and Test App
    runs-on: ubuntu-latest # Exécute le job sur une machine virtuelle Ubuntu

    steps:
      # Étape pour récupérer le code du dépôt
      - name: Checkout code
        uses: actions/checkout@v4

      # Étape pour configurer Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18' # Utilise Node.js 18
          
          

      # Étape pour installer les dépendances
      - name: Install Dependencies
        run: npm install

      # Étape pour exécuter les tests (si vous en avez)
      - name: Run Tests
        run: npm test # Exécute la commande de test définie dans package.json

  # Job pour l'analyse SAST avec SonarCloud
  sast-scan:
    name: SonarCloud SAST Scan
    runs-on: ubuntu-latest
    needs: build-and-test # Ce job dépend du succès du job 'build-and-test'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        # Important: Fetch full history for SonarCloud to analyze correctly
        with:
          fetch-depth: 0

      # Étape pour configurer Java (nécessaire pour SonarScanner)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # Étape pour l'analyse SonarCloud
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          # Jeton d'authentification SonarCloud (configuré comme secret GitHub)
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          # Nom de l'organisation SonarCloud (configuré comme secret GitHub)
          SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}
          # Clé du projet SonarCloud (configuré comme secret GitHub)
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
        with:
          # Arguments supplémentaires pour SonarScanner
          args: >
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.sources=. # Scanne le répertoire racine du projet
            -Dsonar.host.url=https://sonarcloud.io # URL de SonarCloud

  # Job pour l'analyse des dépendances avec OWASP Dependency-Check
  dependency-scan:
    name: OWASP Dependency-Check
    runs-on: ubuntu-latest
    needs: build-and-test # Ce job dépend du succès du job 'build-and-test'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Étape pour exécuter OWASP Dependency-Check via Docker
      - name: Run OWASP Dependency-Check
        # Utilise l'image Docker officielle de Dependency-Check
        # -v $(pwd):/src:rw monte le répertoire courant du repo dans le conteneur
        # --scan /src spécifie le répertoire à scanner
        # --format HTML,XML génère des rapports HTML et XML
        # --project "Simple Node App" donne un nom au projet dans le rapport
        # --out /src/reports spécifie le répertoire de sortie des rapports
        run: |
          docker run --rm \
            -v $(pwd):/src:rw \
            owasp/dependency-check:latest \
            --scan /src \
            --format HTML,XML \
            --project "Simple Node App" \
            --out /src/reports

      # Étape pour uploader les rapports comme artefacts du workflow
      - name: Upload Dependency-Check Report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: reports/
          retention-days: 5 # Garde les artefacts pendant 5 jours
